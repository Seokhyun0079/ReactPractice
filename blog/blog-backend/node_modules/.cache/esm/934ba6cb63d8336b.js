let mongoose,Schema,bcrypt,jwt;_63d‍.x([["default",()=>_63d‍.o]]);_63d‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}],["Schema",["Schema"],function(v){Schema=v}]]);_63d‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);_63d‍.w("jsonwebtoken",[["default",["jwt"],function(v){jwt=v}]]);



const UserSchema = new Schema({
    username : String,
    hashedPassword : String
});

UserSchema.methods.setPassword = async function(password){
    const hash = await bcrypt.hash(password, 10);
    this.hashedPassword = hash;
};

UserSchema.methods.checkPassword = async function(password){
    const result = await bcrypt.compare(password, this.hashedPassword);
    return result;
}

UserSchema.statics.findByUsername = function(username){
    return this.findOne({username});
}

UserSchema.methods.serialize = function(){
    const data = this.toJSON();
    delete data.hashedPassword;
    return data;
};

UserSchema.methods.generateToken = function(){
    const token = jwt.sign(
        {
            _id: this.id,
            username : this.username
        },
        process.env.JWT_SECRET,
        {
            expiresIn:'7d',
        },
    );
    return token;
}

const User = mongoose.model('User', UserSchema);
_63d‍.d(User);